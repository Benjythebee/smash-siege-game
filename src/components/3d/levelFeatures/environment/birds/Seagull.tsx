/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 ./public/models/seagull.glb -t 
*/

import * as THREE from 'three';
import React, { useEffect } from 'react';
import { useGraph } from '@react-three/fiber';
import { useGLTF, useAnimations } from '@react-three/drei';
import { GLTF, SkeletonUtils } from 'three-stdlib';

type ActionName = 'Fly';

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    Flying_seagull: THREE.SkinnedMesh;
    Bone: THREE.Bone;
    neutral_bone: THREE.Bone;
  };
  materials: {
    lambert5SG: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export const Seagull = React.forwardRef((props: JSX.IntrinsicElements['group'], ref: any) => {
  const group = React.useRef<THREE.Group>(null);
  const { scene, animations } = useGLTF('./models/seagull.glb');
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as GLTFResult;
  const a = useAnimations(animations, group);

  useEffect(() => {
    a.actions.Fly?.setEffectiveTimeScale(8);
    a.actions.Fly?.play();
  }, []);

  return (
    <group ref={ref} {...props}>
      <group ref={group} rotation={[0, Math.PI, 0]} dispose={null}>
        <group name="Scene">
          <group name="Armature">
            <primitive object={nodes.Bone} />
            <primitive object={nodes.neutral_bone} />
            <skinnedMesh
              rotation={[0, 0, 0]}
              name="Flying_seagull"
              geometry={nodes.Flying_seagull.geometry}
              material={materials.lambert5SG}
              skeleton={nodes.Flying_seagull.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
});

useGLTF.preload('./models/seagull.glb');
